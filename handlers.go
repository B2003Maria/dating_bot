package main

import (
	// "log"
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleMessage(update tgbotapi.Update) {
	if state, exists := userStates[update.Message.From.ID]; exists && state.CurrentField != "AllGood" {
		b.handleProfileResponse(update)
		return
	}
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
	switch update.Message.Text {
	case "/start":
		if _, exists := Users[update.Message.From.ID]; exists {
			fmt.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID=%d —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n", update.Message.From.ID)
			b.handleExistingStart(update)
			return
		}
		Users[update.Message.From.ID] = User{}
		saveToFile(Users)
		b.handleFirstStart(update)
	case "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É":
		b.handleProfileWriting(update)
	case "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã":
		b.handleWatchProfile(update)
	}
}

func (b *Bot) handleCallbackQuery(update tgbotapi.Update) {
	callback := update.CallbackQuery

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ CallbackQuery, —á—Ç–æ–±—ã Telegram –ø–µ—Ä–µ—Å—Ç–∞–ª –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "—á–∞—Å–∏–∫–∏"
	ack := tgbotapi.NewCallback(callback.ID, "") // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	if _, err := b.api.Request(ack); err != nil {
		lg.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è CallbackQuery: %v", err)
		return
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
	action := callback.Data
	lg.Println(action)
	var response string

	switch action {
	case "like":
		response = "–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ ‚ù§Ô∏è"
	case "dislike":
		response = "–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ üíî"
	case "sleep":
		response = "–í—ã –≤—ã–±—Ä–∞–ª–∏ üò¥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω."
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(callback.Message.Chat.ID, response)
	b.api.Send(msg)
}

func (b *Bot) showProfile(update tgbotapi.Update, profile Profile) {
	summary := fmt.Sprintf(
		"–ò–º—è: %s\n–í–æ–∑—Ä–∞—Å—Ç: %d\n–ü–æ–ª: %s\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s",
		profile.Name, profile.Age, profile.Gender, profile.Interest, profile.Description,
	)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
	photoMsg := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileID(profile.Photo))
	photoMsg.ReplyMarkup = ReactionsInlineKeyboard
	photoMsg.Caption = summary
	b.api.Send(photoMsg)
}

func (b *Bot) showProfiles(update tgbotapi.Update) {
	for _, user := range Users {
		lg.Println(user)
		b.showProfile(update, user.Profile)
	}
}

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
func (b *Bot) handleFirstStart(update tgbotapi.Update) {
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s! –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!", update.SentFrom().FirstName)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ReplyMarkup = AddProfileKeyboard
	b.api.Send(msg)
}

func (b *Bot) handleExistingStart(update tgbotapi.Update) {
	text := fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, %s! –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≤–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!", update.SentFrom().FirstName)

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ReplyMarkup = WatchProfilesKeyboard
	b.api.Send(msg)
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã
type UserState struct {
	Profile      Profile
	CurrentField string
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var userStates = make(map[int64]*UserState)

func (b *Bot) handleProfileWriting(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
	if _, exists := userStates[chatID]; !exists {
		userStates[chatID] = &UserState{
			Profile:      Profile{},
			CurrentField: "Name",
		}
	}
	msg := tgbotapi.NewMessage(chatID, "–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–Ω–∫–µ—Ç–µ.")
	b.api.Send(msg)
	b.askNextQuestion(update)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func (b *Bot) askNextQuestion(update tgbotapi.Update) {
	state := userStates[update.Message.Chat.ID]

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
	var question string
	var keyboard interface{}

	switch state.CurrentField {
	case "Name":
		question = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
	case "Age":
		question = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99."
	case "Gender":
		question = "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª?"
		keyboard = ChooseGenderKeyboard
	case "Interest":
		question = "–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?"
		keyboard = ChooseInterestKeyboard
	case "Description":
		question = "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ"
	case "Photo":
		question = "–ó–∞–≥—Ä—É–∑–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ"
	case "Check":
		question = "–í—Å—ë –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ?"
		keyboard = IsProfileOkKeyboard
	case "AllGood":
		question = "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
		keyboard = WatchProfilesKeyboard
		b.saveUser(update, state.Profile)
	default:
		b.finishProfile(update)
		return
	}
	// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, question)
	if keyboard != nil {
		msg.ReplyMarkup = keyboard
	} else {
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	}
	b.api.Send(msg)
}

func (b *Bot) handleProfileResponse(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	state := userStates[chatID]
	switch state.CurrentField {
	case "Name":
		state.Profile.Name = update.Message.Text
		state.CurrentField = "Age"
	case "Age":
		var age uint8
		_, err := fmt.Sscanf(update.Message.Text, "%d", &age)
		if err != nil || age < 18 || age > 99 {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 99).")
			b.api.Send(msg)
			return
		}
		state.Profile.Age = age
		state.CurrentField = "Gender"
	case "Gender":
		if update.Message.Text != "–ú—É–∂—Å–∫–æ–π" && update.Message.Text != "–ñ–µ–Ω—Å–∫–∏–π" {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π.")
			b.api.Send(msg)
			return
		}
		state.Profile.Gender = update.Message.Text
		state.CurrentField = "Interest"
	case "Interest":
		if update.Message.Text != "–î–µ–≤—É—à–∫–∏" && update.Message.Text != "–ü–∞—Ä–Ω–∏" && update.Message.Text != "–ù–µ–≤–∞–∂–Ω–æ" {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –î–µ–≤—É—à–∫–∏, –ü–∞—Ä–Ω–∏, –ù–µ–≤–∞–∂–Ω–æ.")
			b.api.Send(msg)
			return
		}
		state.Profile.Interest = update.Message.Text
		state.CurrentField = "Description"
	case "Description":
		state.Profile.Description = update.Message.Text
		state.CurrentField = "Photo"
	case "Photo":
		if update.Message.Photo != nil {
			state.Profile.Photo = update.Message.Photo[0].FileID
			state.CurrentField = "" // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ
		} else {
			msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ.")
			b.api.Send(msg)
			return
		}
	case "Check":
		// lg.Println("\n\n\n\n")
		if update.Message.Text == "–í—Å—ë –≤–µ—Ä–Ω–æ" {
			state.CurrentField = "AllGood"
			b.askNextQuestion(update)
			return
		}
		if update.Message.Text == "–í–≤–µ—Å—Ç–∏ –∞–Ω–µ–∫—Ç—É –∑–∞–Ω–æ–≤–æ" {
			state.CurrentField = "Name"
			b.askNextQuestion(update) // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
			return
		}
		// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–í—Å—ë –≤–µ—Ä–Ω–æ' –∏–ª–∏ '–í–≤–µ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ'.")
		b.api.Send(msg)
	case "AllGood":
		b.saveUser(update, state.Profile)
		b.handleMessage(update)
		return
	}
	b.askNextQuestion(update)
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
func (b *Bot) finishProfile(update tgbotapi.Update) {
	state := userStates[update.Message.Chat.ID]
	profile := state.Profile

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!\n–î–∞–≤–∞–π —Å–≤–µ—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
	b.api.Send(msg)
	summary := fmt.Sprintf(
		"–ò–º—è: %s\n–í–æ–∑—Ä–∞—Å—Ç: %d\n–ü–æ–ª: %s\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: %s\n–û–ø–∏—Å–∞–Ω–∏–µ: %s",
		profile.Name, profile.Age, profile.Gender, profile.Interest, profile.Description,
	)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
	photoMsg := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileID(profile.Photo))
	photoMsg.Caption = summary
	b.api.Send(photoMsg)

	// –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if state.CurrentField == "AllGood" {
		b.saveUser(update, profile)
	} else {
		state.CurrentField = "Check"
		b.askNextQuestion(update)
	}
}

func (b *Bot) handleWatchProfile(update tgbotapi.Update) {
	lg.Println(Users)
	b.showProfiles(update)
}

func (b *Bot) saveUser(update tgbotapi.Update, profile Profile) {
	var user User
	user.ChatID = update.Message.Chat.ID
	user.Profile = profile
	user.Username = update.Message.From.UserName
	Users[update.Message.From.ID] = user
	err := saveToFile(Users)
	if err != nil {
		lg.Printf("Failed to save user %v:\n%s", user, err)
	}
	lg.Printf("User: %s is saved!", update.Message.From.UserName)
	delete(userStates, update.Message.Chat.ID)
}
